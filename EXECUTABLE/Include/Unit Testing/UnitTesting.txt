With unit testing being done throughout the game for various functions that use integers and Boolean operators a large portion of the game 
was able to be unit tested. However with a large majority of the games aesthetic features use image, Fonts and audio files which are unable 
to be unit tested to ensure they work. In order to check that these files properly load into the game whenever they are referenced 
in the code a test if conducted to see if they load.
The following is an example of one of these tests:

 if(!world->loadFromFile(picture)){
                cout <<"Planet Image Not Found"<< endl;
                exit(0);
            }

The code above checks to see if the image associated with the World is found, 
if it is not found it will display a message and exit the game, if it is found the test will pass and the game will continue as expected.

Another use of defensive programming was limiting the players input in the high score menu to only upper and lowercase letters,
This was done to ensure no unexpected inputs were received and the game could not be broken
